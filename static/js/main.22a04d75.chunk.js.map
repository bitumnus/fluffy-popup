{"version":3,"sources":["ui/Button/Button.js","ui/Modal/Modal.js","ui/Input/Input.js","axios/axios.js","store/actions/actions.js","store/actions/actionTypes.js","form/formFramework.js","components/PlayForm/PlayForm.js","components/ResultText/ResultText.js","components/Info/InfoBlock.js","components/Main/Main.js","App.js","serviceWorker.js","store/reducers/rootReducer.js","index.js"],"names":["Button","props","onClick","className","type","disabled","children","Modal","forwardRef","ref","useState","display","setDisplay","useImperativeHandle","openModal","open","close","ReactDOM","createPortal","title","document","getElementById","Input","inputType","htmlFor","Math","random","label","id","value","onChange","valid","touched","shouldValidate","isInvalid","errorMessage","axios","create","baseURL","createText","text","fetchTextStart","fetchTextError","error","validate","validation","isValid","required","trim","validateForm","formControls","isFormValid","control","hasOwnProperty","createOptionControl","textLabel","config","createFormControls","words","word1","word2","word3","word4","PlayForm","state","submitHandler","event","preventDefault","sentWords","onAdd","closeModal","changeHandler","controlName","name","setState","renderControls","Object","keys","map","index","key","target","onSubmit","this","Component","connect","dispatch","add","post","getState","a","then","res","status","response","sentText","textRef","useRef","story","current","textContent","InfoBlock","responseText","statusText","data","success","modalRef","modalRefPlay","isVisible","setIsVisible","useEffect","setTimeout","bind","App","Boolean","window","location","hostname","match","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","applyMiddleware","thunk","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.22a04d75.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nconst Button = props => {\r\n  \r\n  return (\r\n    <button\r\n      onClick={props.onClick}\r\n      className={`Button ${props.type}`}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport './Modal.css';\r\nimport Button from \"../Button/Button\";\r\n\r\nconst Modal = forwardRef((props, ref) => {\r\n  const [display, setDisplay] = useState(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      openModal: () => open(),\r\n      close: () => close()\r\n    }\r\n  });\r\n\r\n  const open = () => {\r\n    setDisplay(true)\r\n  };\r\n\r\n  const close = () => {    \r\n    setDisplay(false);\r\n  };\r\n\r\n  if (display) {\r\n    return ReactDOM.createPortal(\r\n      <div className={\"modal-wrapper\"}>\r\n        <div onClick={close} className={\"modal-backdrop\"} />\r\n          \r\n          <div className={\"modal-box\"}>\r\n          <div className=\"modal-header\">\r\n            <h2>{props.title}</h2>\r\n            <Button type=\"close\" onClick={close}>&times;</Button>\r\n          </div>\r\n            {props.children}\r\n          </div>\r\n      </div>, document.getElementById(\"modal-root\"))\r\n  }\r\n\r\n  return null;\r\n\r\n});\r\n\r\nexport default Modal;","import React from 'react'\r\nimport './Input.css'\r\n\r\nfunction isInvalid({valid, touched, shouldValidate}) {\r\n  return !valid && shouldValidate && touched\r\n}\r\n\r\nconst Input = props => {\r\n  const inputType = props.type || 'text'\r\n  // const cls = [Input]\r\n  const htmlFor = `${inputType}-${Math.random()}`\r\n\r\n  // if (isInvalid(props)) {\r\n  //   cls.push(classes.invalid)\r\n  // }\r\n\r\n  return (\r\n    <div className=\"Input\">\r\n      <label htmlFor={htmlFor}>{props.label}</label>\r\n      <input\r\n        type={inputType}\r\n        id={htmlFor}\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n      />\r\n\r\n      {\r\n        isInvalid(props)\r\n          ? <span>{props.errorMessage || 'Введите верное значение'}</span>\r\n          : null\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n  //~~~~~~~ for response status 200 ~~~~~~~~~~\r\n  baseURL: 'https://react-quiz-3e9b0.firebaseio.com/'\r\n\r\n  //~~~~~~~ for response status 404 ~~~~~~~~~~\r\n  // baseURL: 'https://react-3e9b0.firebaseio.com/'\r\n\r\n})","import {\r\n    ADD_WORDS,\r\n    CREATE_TEXT,\r\n    RESET_GAME,\r\n    FETCH_TEXT_START,\r\n    FETCH_TEXT_RESPONSE,\r\n    FETCH_TEXT_ERROR,\r\n} from './actionTypes';\r\nimport axios from '../../axios/axios';\r\n\r\nexport function add(words) {\r\n    return {\r\n        type: ADD_WORDS,\r\n        words,\r\n    }\r\n}\r\n\r\nexport function createText(text) {\r\n\r\n    return {\r\n      type: CREATE_TEXT,\r\n      text,\r\n    }\r\n  }\r\n  \r\nexport function resetGame() {\r\n    return {\r\n        type: RESET_GAME\r\n    }\r\n}\r\n\r\n\r\nexport function fetchTextStart() {\r\n    return {\r\n      type: FETCH_TEXT_START\r\n    }\r\n  }\r\n  \r\nexport function fetchTextResponse(response) {\r\n    return {\r\n        type: FETCH_TEXT_RESPONSE,\r\n        response\r\n    }\r\n}\r\n  \r\nexport function fetchTextError(error) {\r\n    return {\r\n        type: FETCH_TEXT_ERROR,\r\n        error\r\n    }\r\n}\r\n\r\nexport function sentText(text) {\r\n    return async (dispatch, getState) => {\r\n        dispatch(fetchTextStart);\r\n        dispatch(createText(text));\r\n        try {\r\n            await axios.post('/storys1.json', getState().text)\r\n            .then(res => {\r\n                if (res.status === 200) {\r\n                    dispatch(fetchTextResponse(res));\r\n                    dispatch(resetGame())\r\n                } else {\r\n                    dispatch(fetchTextError(res))\r\n                    dispatch(resetGame())\r\n                }\r\n            })\r\n        } catch (error) {\r\n            dispatch(fetchTextError(error.response))\r\n        }\r\n        \r\n    }\r\n}","export const ADD_WORDS = 'ADD_WORDS';\r\nexport const RESET_GAME = 'RESET_GAME';\r\nexport const CREATE_TEXT = 'CREATE_TEXT';\r\nexport const FETCH_TEXT_START = 'FETCH_TEXT_START';\r\nexport const FETCH_TEXT_ERROR = 'FETCH_TEXT_ERROR';\r\nexport const FETCH_TEXT_RESPONSE = 'FETCH_TEXT_RESPONSE';\r\n\r\n","export function createControl(config, validation) {\r\n    return {\r\n      ...config,\r\n      validation,\r\n      valid: !validation,\r\n    //   value: '',\r\n      touched: false,\r\n    }\r\n  }\r\n  \r\n  export function validate(value, validation = null) {\r\n    if (!validation) {\r\n      return true\r\n    }\r\n  \r\n    let isValid = true\r\n\r\n    if (validation.required) {\r\n      isValid = value.trim() !== '' && isValid\r\n    }\r\n  \r\n    return isValid\r\n  }\r\n  \r\n  export function validateForm(formControls) {\r\n    let isFormValid = true\r\n  \r\n    \r\n    for (let control in formControls) {\r\n      if (formControls.hasOwnProperty(control)) {\r\n        isFormValid = formControls[control].valid && isFormValid\r\n      }\r\n    }\r\n  \r\n    return isFormValid\r\n  }","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Input from '../../ui/Input/Input';\r\nimport { add } from '../../store/actions/actions';\r\nimport { createControl, validate, validateForm } from '../../form/formFramework';\r\nimport Button from '../../ui/Button/Button';\r\n\r\n\r\n\r\nfunction createOptionControl(id, textLabel, value) {\r\n    return createControl({\r\n      label: `Введи ${textLabel}`,\r\n      errorMessage: 'Значение не может быть пустым',\r\n      value: value,\r\n      id: id\r\n    }, {required: true})\r\n}\r\n\r\nfunction createFormControls(words) {\r\n    return {\r\n      word1: createOptionControl(1, 'Имя твоего друга', words ? words.word1.value : ''),\r\n      word2: createOptionControl(2, 'прилагательное (какой?)', words ? words.word2.value : ''),\r\n      word3: createOptionControl(3, 'часть тела', words ? words.word3.value : ''),\r\n      word4: createOptionControl(4, 'глагол (что сделал?)', words ? words.word4.value : ''),\r\n    }\r\n}\r\n\r\nclass PlayForm extends Component {\r\n    state = {\r\n        formControls: createFormControls(this.props.words),\r\n        isFormValid: false,\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    sentWords = () => {\r\n        this.props.onAdd(this.state.formControls);\r\n        this.props.closeModal();\r\n    }\r\n      \r\n    changeHandler = (value, controlName) => {\r\n        const formControls = this.state.formControls;\r\n        const control = {...formControls[controlName]};;\r\n        control.name = controlName;\r\n        control.touched = true;\r\n        control.value = value;\r\n        control.valid = validate(control.value, control.validation);\r\n        \r\n        formControls[controlName] = control;\r\n        this.setState({\r\n            formControls,\r\n            isFormValid: validateForm(formControls)\r\n        })\r\n    }\r\n    \r\n    renderControls = () => {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n          const control = this.state.formControls[controlName]\r\n    \r\n          return (\r\n              <Input\r\n                key={index}\r\n                label={control.label}\r\n                value={control.value}\r\n                valid={control.valid}\r\n                shouldValidate={!!control.validation}\r\n                touched={control.touched}\r\n                errorMessage={control.errorMessage}\r\n                onChange={event => this.changeHandler(event.target.value, controlName)}\r\n              />\r\n          )\r\n        })\r\n      }\r\n      render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.submitHandler}>\r\n                    {this.renderControls()}\r\n                    <Button type=\"primary\" disabled={!this.state.isFormValid} onClick={this.sentWords}>Создать историю</Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        words: state.words,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        onAdd: words => dispatch(add(words)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayForm);\r\n","import React, { useState, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sentText } from '../../store/actions/actions';\r\nimport Button from '../../ui/Button/Button';\r\nimport './ResultText.css'\r\n\r\nconst PlayForm = (props) => {\r\n    const {words, closeModal, post} = props;\r\n    const textRef = useRef();\r\n    \r\n    const startText = () => {\r\n        return (\r\n            <div ref={textRef}>\r\n                Привет, <span>{words.word1.value}</span>. Видел твоего брата, он действително <span>{words.word2.value}</span>.\r\n                Потом мне очень заболел <span>{words.word3.value}</span>. И я быстро <span>{words.word4.value}</span> прямо во дворе.\r\n            </div>\r\n            )\r\n    }\r\n    const [text, setText] = useState(startText());\r\n\r\n    const sent = event => {\r\n        event.preventDefault();\r\n        const story = {\r\n            text: textRef.current.textContent\r\n        }\r\n        post(story);\r\n        closeModal();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                {text}\r\n            </div>\r\n            <Button type=\"primary\" onClick={sent}>Отправить это куда-то</Button>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        words: state.words,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        post: text => dispatch(sentText(text))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayForm);\r\n","import React from 'react';\r\n\r\nconst InfoBlock = props => {\r\n    let responseText = '';\r\n    switch (props.response.status) {\r\n        case 200:\r\n            return responseText = `Всё ${props.response.statusText}. Очень смешно :)`\r\n        case 403:\r\n            return responseText = `Ещё подумай: ${props.response.data.status}`\r\n        case 404:\r\n            return responseText = `Не туда отправляешь: ${props.response.data.error}`\r\n        case 500:\r\n            return responseText = `У сервера бедося: ${props.response.data.error}`\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {responseText}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InfoBlock;","import React, { useEffect, useState, useRef } from 'react';\r\nimport Modal from '../../ui/Modal/Modal';\r\nimport PlayForm from '../PlayForm/PlayForm';\r\nimport ResultText from '../ResultText/ResultText';\r\nimport { connect } from 'react-redux';\r\nimport Button from '../../ui/Button/Button';\r\nimport InfoBlock from '../Info/InfoBlock';\r\n\r\n\r\nconst Main = (props) => {\r\n    const { words, success, error } = props;\r\n    const modalRef = useRef();\r\n    const modalRefPlay = useRef();\r\n    const [isVisible, setIsVisible] = useState(false)\r\n    \r\n    const openModalPlay = () => modalRefPlay.current.openModal();\r\n    const closeModalPlay = () => modalRefPlay.current.close();\r\n    const openModal = () => modalRef.current.openModal();\r\n    const closeModal = () => modalRef.current.close();\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setTimeout(() => {\r\n                setIsVisible(true);\r\n            }, 500);\r\n            setTimeout(() => {\r\n                setIsVisible(false);\r\n            }, 5000);\r\n        }\r\n    }, [success, error])\r\n\r\n    return (\r\n        <>\r\n            { (success || error) && isVisible &&\r\n                <div className={success ? \"success\" : \"error\"}>\r\n                    <InfoBlock response={success || error} />\r\n                </div>\r\n            }\r\n            <br />\r\n            <div className=\"main\">\r\n                <p>\r\n                    Хочешь повеселиться? После нажатия \"Играть\" выскочит форма. Заполни поля соответствующими словами. Проявляй фантазию.\r\n                    Отправляй нам слова, мы соберем историю. Прочитать её сможешь только когда отправишь слова и потом нажмёшь нужную кнопку. Удачи!\r\n                </p>\r\n                <Button type=\"primary\" onClick={openModalPlay}>Играть</Button>\r\n                <Button type=\"primary\" onClick={openModal} disabled={!words}>Собрать историю</Button>\r\n                <Modal ref={modalRefPlay} title=\"Давай играть\">\r\n                    <PlayForm words={words} closeModal={closeModalPlay.bind(this)} />\r\n                </Modal>\r\n                <Modal ref={modalRef} title=\"Твоя история\">\r\n                    <ResultText closeModal={closeModal.bind(this)} />\r\n                </Modal>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        words: state.words,\r\n        error: state.error,\r\n        success: state.success,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Main);","import React from 'react';\nimport Main from './components/Main/Main'\n\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    ADD_WORDS,\r\n    RESET_GAME,\r\n    CREATE_TEXT,\r\n    FETCH_TEXT_START,\r\n    FETCH_TEXT_ERROR,\r\n    FETCH_TEXT_RESPONSE,\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    words: null,\r\n    text: null,\r\n    success: null,\r\n    error: null,\r\n}\r\n\r\nexport default function rootReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case ADD_WORDS:\r\n            return {\r\n               ...state, words: action.words\r\n            }\r\n        case FETCH_TEXT_START:\r\n            return {\r\n                ...state\r\n            }\r\n        case CREATE_TEXT:\r\n            return {\r\n                ...state, text: action.text\r\n            }\r\n        case FETCH_TEXT_RESPONSE:\r\n            return {\r\n                ...state, success: action.response\r\n            }\r\n        case FETCH_TEXT_ERROR:\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        case RESET_GAME:\r\n            return {\r\n                ...state, words: null, text: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport thunk from 'redux-thunk';\n\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    }) : compose;\n\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(thunk)\n  )\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}